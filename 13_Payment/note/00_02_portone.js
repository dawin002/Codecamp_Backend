// PG사 실습 - Portone (구 아임포트)


//      포트원 Portone

//          대표적인 PG 서비스를 처리해주는 회사


// 포트원 시작하기

//      1. 포트원 가입

//      2. 관리자 콘솔 접속
//          결제 연동 : 결제 설정
//          콘솔 가이드 : Docs

//      3. 결제 연동
//          1) 결제연동 접속
//          2) 내 식별코드 API Keys 확인
//              가맹점 식별코드 
//              : 브라우저에서 포트원 접속할 때 사용되는 키값
//              REST API Key, REST API Secret
//              : Axios 로 REST API 사용할 때 사용되는 키값과 비밀번호
//          3) 테스트/실 연동
//              강의자료 참고

//      4. 콘솔 가이드 확인
//          1) 콘솔 가이드 보기 클릭


// 결제알림 Webhook

//          강의자료에 없는 내용임

//      Webhook (웹훅)?

//          1) 결제 연동 메뉴 접속
//          2) 결제알림(Webhook) 관리 탭 클릭
//          3) Endpoint URL 이란게 있고 이 주소로 웹훅을 보낸다고함

//          특정 이벤트가 발생했을 때 백엔드 서버로 알림을 보내는 기능

//          포트원 서버에서 브라우저 응답을 전달할 때 브라우저가 결제 완료 응답을 받지 못하면
//          백엔드 서버로 webhook 이벤트를 발송해 결제 정보를 동기화해줌

//      무통장입금의 문제점

//          무통장입금 결제 방식을 선택하면 가상 계좌를 발급받아 이체하는 방식

//          입금 계좌 정보가 뜬 브라우저를 종료하고 가상 계좌로 무통장 입금을 하면
//          솔루션사와 PG사, 카드사에서 결제가 처리되지만 이미 브라우저가 닫혔기 때문에
//          결제 정보가 백엔드 응답으로 넘어가지 않아 DB에 저장을 못함

//      웹훅을 사용해 해결

//          백엔드 서버에 API 하나를 만들고 웹훅 주소로 작성해두면
//          무통장입금 결제나 결제 취소가 오면 백엔드 서버의 API로 정보를 보내줌
//          => 웹훅을 받는 API 주소를 Webhook URL 또는 Webhook Notification

//          다음 상황들에서 웹훅 호출
//          결제 승인, 가상계좌 발급, 가상계좌 입금, 예약결제 시도, 관리자 콘솔에서 결제 취소


// 포트원 결제 프로세스

//          1. 브라우저에서 결제하기 버튼을 클릭하면 프론트엔드에서 포트원에 Rest API로 결제를 요청
//          2. 포트원은 PG사에 결제를 요청
//          3. PG사는 카드사에 결제를 요청
//          4. 결제가 다 되면, 포트원이 결제건에 대한 ID값을 보내줌, => imp_uid
//          5. 프론트 엔드는 받은 imp_uid를 백엔드에 건내줌
//          6. 백엔드는 DB에 결제 정보와 함께 imp_uid를 저장함