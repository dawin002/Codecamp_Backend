// 데이터베이스 connection

//          queryRunner.connect() 처럼 트랜잭션에서 DB와 연결할 수 있음

//          커넥션에 백엔드의 메모리가 사용되어 동시에 커넥션할 수 있는 개수가 제한되어 있음

// 커넥션 실습

//      1. 데이터베이스 실습

//          1) 기본값으로 설정된 최대 커넥션 개수 확인
`               show variables;
`//             max_connections 값 확인 => 151개 
//              DB에서 동시에 연결할 수 있는 커넥션 개수가 151개임

//          2) DB 최대 커넥션 개수 변경
`               set glabal max_connections = 15;
`
//          3) 현재 연결된 커넥션 개수 확인
`               show status;
`//             Threds_created 값 확인 => 4개

//          4) 현재 연결된 커넥션 리스트 확인
`               show processlist;
`

//      2. 최대 커넥션 개수를 초과하면 어떻게 될까?

//          1) 13-02 프로젝트에서 queryRunner.release() 함수 주석 처리

//          2) 서버 실행

//          3) Playground에서 성공 요청 보내기
//              에러가 발생하면 자동으로 연결이 끊기기 때문에 성공 요청으로 보내야함

//          => 최대 커넥션 개수를 초과한 커넥션 요청은 처리가 안된 채 기다림
//          => 먼저 연결된 커넥션이 끊기면 하나씩 연결됨

//          => 기다리는 커넥션이 늘어날수록 DB의 부하가 심해짐


//      3. 최대 커넥션 개수는 몇개가 적당할까?

//          AWS 공식 문서를 보면 컴퓨터 메모리에 따라 자체적으로 조정됨


//      4. 커넥션이 오류로 릴리즈되지 않을 땐 어떻게 해야할까?

//          1) 커넥션 강제로 끊기
`               kill 123;
`//             123 은 커넥션 아이디


//      5. 쿼리러너를 통해 커넥션 연결 안했을 때는 어떻게 됐던거지?

//          트랜잭션이나 쿼리러너, 커넥션 신경 안썼던 회원가입 API에서는
//          자동으로 DB접근 위아래에서 트랜잭션 시작과 끝, 커넥션 연결과 릴리즈가 들어갔었음

//          vscode 의 터미널에 출력된 DB 쿼리문을 보면 트랜잭션 관련 코드 확인 가능
`               query: START TRANSACTION
                ~~~
                query: COMMIT
`