// SOP

//      Same Origin Policy
//      동일 출처 정책

//      동일한 출처의 리소스만 상호작용을 허용하는 정책
//      A 출처에서 온 문서가 B 출처에서 가져온 리소스와 상호작용하는 것을 차단함

//      ex)
//          브라우저로 네이버 접속 -> 네이버 백엔드에 api 요청 (O)
//          브라우저로 네이버 접속 -> 다음 백엔드에 api 요청 (X)


// CORS

//      Cross Origin Resource Sharing

//      다른 출처의 리소스(데이터)에 대해서도 공유를 허용하는 것
//      cors를 허용해둔 경우 다른 출처의 문서에서 내 리소스 접근 가능
//      cors가 거절 상태인 경우 요청 코드 자체가 실행되지 않음

//      ex) 
//          브라우저로 네이버 접속 -> 다음 백엔드(cors 허용)에 api 요청 (O)
//          브라우저로 네이버 접속 -> 다음 백엔드(cors 거절)에 api 요청 (X)

//      preflight 요청
//          다른 출처의 백엔드 서버에 api 요청을 보내기 앞서 요청이 가능한지 물어보는 요청
//          cors를 허용하는지, 어떤 api를 사용할 수 있는지 물어봄


// CORS 통신 순서

//          네이버(브라우저 접속)와 다음(백엔드 서버)의 통신

//      cors 허용인 경우

//          1. 네이버 브라우저에서 다음 백엔드로 preflight 요청 전송
//          2. 다음 백엔드에서 네이버 브라우저로 preflight 응답 전송(cors 허용, get, post, ... 사용 가능)
//          3. 네이버 브라우저에서 다음 백엔드로 api 요청(get 메서드)
//          4. 다음 백엔드에서 네이버 브라우저로 api 응답(조회한 데이터)

//      cors 거절(미허용)인 경우

//          1. 네이버 브라우저에서 다음 백엔드로 preflight 요청 전송
//          2. 다음 백엔드에서 네이버 브라우저로 preflight 응답 전송(cors 거절, 메서드 사용 불가능)
//          3. 네이버 접속 브라우저가 api 요청 차단(요청 코드가 실행되지 않음)


// CORS가 거절 상태여도 데이터를 받아올 수 있는 경우

//          cors 상태를 보고 요청을 보내지 않는 결정은 브라우저가 하기 때문에
//           브라우저가 아닌 대상이 api 요청을 보내는 경우 cors 거절 상태에서도 데이터를 받아올 수 있음

//      Proxy 서버
//          데이터를 대신 받아주는 서버
//          브라우저가 아닌 백엔드 서버가 다른 백엔드 서버에 api를 요청, 받은 응답을 브라우저에게 전달

//          1) 브라우저가 proxy 서버에 데이터 요청 
//          2) proxy 서버가 백엔드 서버에서 데이터 요청(cors 신경 안씀)
//          3) 백엔드 서버가 proxy 서버에 데이터 응답
//          3) proxy 서버가 브라우저에 데이터 응답

//      모바일 앱
//          브라우저가 아닌 어플리케이션이라 cors와 관계 없이 api 요청 가능
//          단, 모바일 브라우저로 접속하는 경우 cors 영향 받음

//          1) 모바일 앱이 백엔드 서버에 데이터 요청
//          2) 백엔드 서버가 모바일 앱에 데이터 응답


// CORS의 의의

//          그럼 cors는 브라우저에 대한 요청만 막을 수 있는데 왜 있냐?
//          => 사실 cors는 백엔드 컴퓨터의 리소스를 보호하기 위해 존재하는 것이 아님
//          => cors는 브라우저를 보호하기 위해 존재하는 것

//      CSRF 방지 예시
//          (Cross Site Request Forgery, 사이트 간 요청 위조)

//          브라우저에서 네이버 사이트의 로그인을 하면 백엔드는 응답으로 로그인 증표(토큰?)을 돌려줌
//          브라우저는 로그인 증표를 가지고 해당 네이버 백엔드에 api 요청을 보냄
//          해커가 네이버와 아주 유사한 가짜 네이버를 만들어 사용자가 가짜 네이버에 로그인 하는 경우
//          브라우저에 저장된 로그인 증표를 가지고 가짜 네이버에서 네이버 백엔드로 api 요청 가능
//          => CORS를 사용하는 경우 이를 방지할 수 있음


// cors 에러 해결하기

//      axios로 api 요청을 하면 cors 관련 에러가 발생
//      해결하는 방법 먼저 확인하자

//      1. cors 다운로드
//          1) backend 폴더 통합 터미널에서 열기
//          2) yarn add cors 명령어 입력

//      2. 백엔드에서 cors 허용하기
//          1) import cors from 'cors'; 명령어 추가
//          2) app.use(cors()); 명령어 추가