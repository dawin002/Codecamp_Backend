// 이벤트 루프

//      강의자료에 없는 내용만 필기

//      이벤트 루프 개념 요약

//          자바스크립트에서 함수를 실행하면 콜스택에 들어옴
//          콜스택에 쌓인 함수를 하나씩 실행(싱글스레드라서 한번에 하나씩)

//          자바스크립트는 싱글스레드 기반이어서 시간이 걸리는 작업은 일단 뒤로 빼둠
//          태스크큐로 일단 빼두고 콜스택이 비면 다시 불러와서 실행

//          => 이렇게 함수(이벤트)들을 돌려가며 실행하는 것이 이벤트루프


//      실습에서 setTimeout이 나중에 실행된 이유

//          요약하면 setTimeout이 오래걸리는 작업이라 판단해 태스크큐로 빠졌고,
//          for문은 금방 끝나는 작업이라 판단해 즉시 실행했으나 실제로 오래 걸렸던 것

//          setTimeout을 0초로 지정해도 콜스택이 얼마나 밀려있는지에 따라 실행 시간이 달라짐

//          자세한 설명은 강의자료 참고


// 싱글스레드

//      싱글스레드 vs 멀티스레드

//          싱글스레드
//              스레드가 한개

//              모든 작업을 하나의 콜스택에 넣고 하나의 스레드가 차례로 실행

//              스레드가 하나의 작업을 실행하면 그 작업이 끝날 때까지 온전히 그 작업만 실행함

//              문제점) 오래 걸리는 작업이 있는 경우 해당 작업이 끝날 때까지 다른 작업은 블락됨

//          멀티스레드
//              스레드가 여러개

//              작업을 여러개의 콜스택에 나누어 넣고 각각의 스레드가 하나씩 차례로 실행
//            * 하지만 동시에 실행하지는 않음 CPU는 하나이기 때문에 하나씩 순서대로 실행

//              스레드가 하나의 작업을 실행하다가 그 작업이 덜 끝나도 중간 저장을 하고
//              다음 스레드가 자신의 작업을 실행
//              => 컨텍스트 스위칭
//              => 오버헤드, 결과적으로 싱글스레드보다 느릴 수 있음

//              장점) 오래 걸리는 작업이 있어도 다른 작업들이 빨리 수행될 수 있음

//      싱글스레드가 효율적이지 못한 경우

//          계산을 많이 해야 하는 작업
//          하나의 스레드가 처리해야 하는 작업이 너무 많은 경우

//          => 작업들이 병목현상, 블락현상이 일어남


//      싱글스레드가 효율적인 경우

//          연속적인 API 요청이 많은 작업
//          기다림이 명확하고, 명확한 기다림이 많은 요청

//          => 싱글스레드가 할일이 명확하게 정해져있기 때문
//          => 어차피 데이터가 들어오는 것을 기다려야하기 때문에 하나씩 수행하기 좋음