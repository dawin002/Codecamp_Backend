// VPC 피어링

//      기본적으로 강의자료 참고하고 아래는 부연 설명

//      VPC란?
//          Virtual Private Cloud
//          서버와 DB를 배포한 클라우드 환경

//      VPC 내부 동작
//          백엔드와 DB는 내부 IP로만 통신 가능
//          백엔드와 브라우저는 외부 IP로만 통신 가능
//          백엔드와 브라우저가 통신할 때는 백엔드의 방화벽을 통과해야함

//      VPC 피어링이란?
//          강의자료 참고

// VPC 피어링 실습

//      오늘 실습 내용

//          지난 시간에는 백엔드 서버가 VPC 안에 들어가있고
//          DB는 또다른 VPC 하나 안에 만들어서
//          백엔드와 DB가 외부 IP를 사용해 통신했음 
//          (DB쪽에 방화벽 필요했음)

//          이번 시간에는 백엔드 서버가 있는 VPC에 DB를 집어넣어
//          백엔드와 DB가 내부 IP를 사용해 통신할 수 있게 만들 것
//          (외부 IP를 내부 IP로 바꿀 것)
//          => VPC 피어링

//      실습은 강의자료 보고 진행

// 추가 백엔드 상식

//      서버리스 서비스 

//          (서버리스 아키텍쳐)
//          얘도 강의자료에 설명 있음

//          개념
//              cloud function 하나당 api 함수를 하나씩 넣어 분리하는 것
//              api를 딱 한개씩만 가진 컴퓨터들을 따로따로 두는 것과 비슷함

//          장점
//              1) 서버를 열어두는게 아니기 때문에 API 하나가 장애를 일으켜도 
//                  나머지 모든 API는 정상 작동함
//                  => 장애율을 줄일 수 있음

//              2) cloud function 을 항상 켜두는 것이 아니라 요청된 api가 포함된 컴퓨터를
//                  실행해 api를 실행하고 일정 시간이 지난 후 컴퓨터를 다시 끔
//                  => 요청 건수당 비용이 발생함, 비용 절감

//          단점
//              1) 함수가 실행되려면 컴퓨터가 켜져야 하는데 컴퓨터가 켜지는데 시간이 걸림
//                  꺼져있는 컴퓨터의 함수를 호출한 경우 느리게 시작됨
//                  => cold start

//              2) 여러 API가 데이터를 주고받아야 하는 트랜잭션이 발생한 경우
//                  cold start 시간이 더 오래걸려 트랜잭션 전체 실행 시간이 길어짐

//              3) 실제 실무에서는 DB의 조인이 필요한 테이블을 조인한 상태로 백엔드 메모리에서
//                  가지고 있다가 (== 캐싱) DB 조회가 필요한 경우 캐싱된 DB를 빠르게 사용하는데
//                  서버리스 아키텍쳐는 캐싱이 유지가 안돼서 성능 극대화 불가능

//          단점 보완
//              warm start
//                  cold start 를 방지하기 위해 4,5분에 한번씩 의미없는 요청을 보내는 방법
//                  많이 사용되는 방법임

//          주로 사용하는 곳

//              성능이 별로 중요하지 않고,
//              비용이 많이 발생하지 않고,
//              사용량이 많지 않은 서비스

//              => 관리자 메뉴, 어드민 페이지 등