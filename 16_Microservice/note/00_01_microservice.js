// 마이크로서비스에 대한 이해

//      강의자료에 없는 부분만 필기


//      마이크로서비스 특징

//          MSA ( Microservice Architecture )

//          쉽게 말하면 NestJS 폴더 나누기
//          DB도 같이 나눠야함

//          각 서비스마다 NestJS 폴더가 각각 존재
//          => 각 폴더에서 yarn start:dev 따로따로 실행

//          각 서비스를 다른 언어로 구현 가능

//      <=> 모놀리틱서비스

//          Monolithicservice

//          한 NestJS 폴더에 모든 서비스를 구현하는 것


//      그럼 브라우저에서 온 API 요청은 어디로 가야돼?

//          백엔드에서 API 이름을 보고 필요한 서비스로 전달해줘야함
//          => API 게이트웨이


//      API 게이트웨이

//          브라우저는 API 게이트웨이 엔드포인트 주소만 알고 있음

//          API 게이트웨이를 구동할 NestJS 폴더가 추가로 하나 필요함

//          @nestjs/microservice 의 ClientsModule 사용


//      마이크로서비스 사용하는 이유

//          1. 소스코드 전체를 빌드/배포하려면 오래 걸림
//              배포를 위해 최적화 과정이 필요한데 
//              내가 수정한 특정 서비스만 최적화(빌드)해서 배포할 수 있음

//          2. 에러 발생해 서버가 죽으면 모든 API 사용 불가능
//              특정 API에 문제가 생겨 프로그램이 종료될 때
//              문제가 생긴 서비스만 종료되고 나머지 서비스는 정상 동작함

//          3. NestJS 개발자만 뽑아야함
//              각 서비스의 언어가 달라도 상관 없기 때문에
//              다양한 언어를 사용하는 개발자 채용 가능


//      마이크로서비스 단점

//          1. 전체적인 기술 복잡도 증가
//              서비스마다 NestJS 폴더, DB가 따로따로 필요함
//              API 게이트웨이가 필요함
//              => 작은 서비스보다 큰 서비스에서 많이 사용

//          => 모든 서비스를 마이크로서비스 아키텍쳐로 구현하는 것은 오버 엔지니어링
//              * 오버 엔지니어링 : 규모에 맞지 않게 굳이 필요없는 기술들을 도입해 개발하는 것