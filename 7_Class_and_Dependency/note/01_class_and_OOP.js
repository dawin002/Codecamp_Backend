// Class

//      클래스란?

//          객체(=인스턴스)를 만드는 설명서(틀)
//          new 키워드로 객체를 생성
//          객체를 구성할 '필드'와 '메서드'를 지정해서 만들 수 있음

//          컴포넌트를 만들 때도 사용됨
//          * 컴포넌트
//              프론트엔드에서 화면을 구성하는 부품
//              컴포넌트를 조립해 화면을 구성
//              버튼, 텍스트 입력창, 텍스트 박스 등
//              컴포넌트를 이용해 개발하는 방식이 React, Angular, Vue 등

//          내장 객체도 있음
//          * 내장 객체
//              JavaScript 에서 이미 만들어져있는 객체
//              Data 객체, 등이 있음

//          클래스에 맞게 그룹화 되어 있는 변수와 함수를 사용
//          => 객체 지향 프로그래밍
//              OOP (Object Oriented Programming)


// Class 실습

//      1. 클래스 선언
//          class 키워드 + 클래스명 + 중괄호
//          내장 객체의 클래스도 재정의 가능

//          1) 클래스 선언
`               class Monster {

                }
`
//          필드와 메서드 선언문 사이에 쉼표(,) 붙이지 않음

//          2) 필드 선언
                `power = 10`
//              필드(변수) 선언시 const, let 안붙임

                `hp`
//              필드 선언시 초기화하지 않아도 됨
//              초기화하지 않은 필드는 undefined 가 저장됨

//          3) 메서드 선언
`               attack() {
                    console.log("공격하자!");
                    console.log("내 공격력은 " + this.power + "야!!");
                }
`//             메서드 선언시 const, function 안붙임
//              메서드 내에서 필드 사용하려면 this 키워드 붙여야 함

`               run = () => {
                    console.log("도망가자!");
                }
`//             메서드 선언시 화살표 함수로 선언 가능

//          4) 생성자 선언
`               constructor(power) {
                    this.power = power;
                }
`//             생성자 함수의 이름은 무조건 constructor 로 정해져 있음
//              객체가 생성될 때 자동으로 딱 한번만 실행되는 함수
//              인자로 준 값으로 필드 초기화 등의 작업을 할 수 있음
//              생성자에서 필드를 초기화하는 경우 클래스 선언시 같은 이름의 필드 선언 생략 가능

//      2. 객체(인스턴스) 사용

//          1) 객체 생성
                `const myMonster1 = new Monster()`
//              new 키워드 사용해 생성자 호출 및 객체 생성

//          2) 객체 메서드 사용
                `myMonster1.attack()`
//              객체 뒤에 . 붙이고 메서드 호출

//          3) 생성자가 있는 경우의 객체 생성
                `const myMonster2 = new Monster(20)`
//              power 필드가 20으로 초기화된 객체 생성

                `const myMonster3 = new Monster()`
//              객체 생성시 인자를 넣어주지 않으면 power 필드는 undefined 로 초기화됨
