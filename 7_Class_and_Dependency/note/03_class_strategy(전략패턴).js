// Strategy pattern 전략 패턴

//      전략 패턴이란?

//          객체가 할 수 있는 행위들 각각을 전략으로 만들어 놓고, 
//          전략의 변경을 통해 객체의 행위를 수정할 수 있는 디자인패턴

//          행위의 추가가 상속에 비해 용이한 장점이 있음


//      상속과 전략 패턴의 차이점

//          상속
//              부모 클래스가 공통된 특성을 가지고 그 특성을 상속받아 자식 클래스 생성

//          전략 패턴
//              전략에 따라 행위를 다르게 만들어두고 클래스의 객체를 생성할 때
//              전략을 선택해 전략에 해당하는 행위를 수행하게 함


//  전략 패턴 실습

//      1. 전략 선언

//          하나의 전략을 하나의 클래스로 선언한다
//          같은 행위를 전략에 따라 다르게 구현한다

            class 복싱 {
                attack = () => {
                    console.log("펀치를 날린다.");
                }
            }

            class 태권도 {
                attack = () => {
                    console.log("발차기를 날린다.");
                }
            }

//      2. 클래스 선언

//          전략에 따라 다른 행위를 수행할 수 있도록
//          1) 전략 필드를 만들고 생성자에서 전달받은 전략 객체로 초기화
//          2) 메서드에서 전략에 정의되어 있는 메서드를 호출

            class 싸움꾼 {
                전략;

                constructor(전략) {
                    this.전략 = 전략;
                }

                attack = () => {
                    this.전략.attack();
                }
            }

//      3. 객체 생성시 전략 전달

//          클래스 객체를 만들 때 전략 객체를 생성해 주입

            const 복싱선수 = new 싸움꾼(new 복싱);
            복싱선수.attack();

            const 태권도선수 = new 싸움꾼(new 태권도);
            태권도선수.attack();

//          복싱 전략을 받은 복싱선수는 attack() 호출시 "펀치를 날린다." 출력
//          태권도 전략을 받은 태권도선수는 attack() 호출시 "발차기를 날린다." 출력